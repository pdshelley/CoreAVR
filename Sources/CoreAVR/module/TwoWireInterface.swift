//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// TwoWireInterface.swift
// Swift For Arduino
//
// Created by Paul Shelley on 12/31/2022.
// Copyright Â© 2022 Paul Shelley. All rights reserved.
//
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


/// TWI, TwoWireInterface, or sometimes called I2C
///
/// Master Transmitter Mode Section 22.7.1
///
/// Start condition is sent by writing TWCR:
///
/// TWINT = 1 - Must be written to one to clear the TWINT Flag
/// TWEA  = X
/// TWSTA = 1 - Must be written to one to transmit a START condition
/// TWSTO = 0
/// TWWC  = X
/// TWEN  = 1 - Must be set to enable the 2-wire Serial Interface.
/// -     = 0
/// TWIE  = X
///
///
/// After a START condition has been transmitted, the TWINT Flag is set by hardware, and the status code in TWSR will be 0x08 (see Table 22-2).
/// In order to enter MT mode, SLA+W must be transmitted. This is done by writing SLA+W to TWDR.
/// Thereafter the TWINT bit should be cleared (by writing it to one) to continue the transfer.
/// This is accomplished by writing the following value to TWCR:
///
/// TWINT = 1
/// TWEA  = X
/// TWSTA = 0
/// TWSTO = 0
/// TWWC  = X
/// TWEN  = 1
/// -     = 0
/// TWIE  = X
///
///
/// When SLA+W have been transmitted and an acknowledgement bit has been received, TWINT is set again and a number of status codes in TWSR are possible.
/// Possible status codes in Master mode are 0x18, 0x20, or 0x38. The appropriate action to be taken for each of these status codes is detailed in Table 22-2.
///
///
/// When SLA+W has been successfully transmitted, a data packet should be transmitted. This is done by writing the data byte to TWDR.
/// TWDR must only be written when TWINT is high. If not, the access will be discarded, and the Write Collision bit (TWWC) will be set in the TWCR Register.
/// After updating TWDR, the TWINT bit should be cleared (by writing it to one) to continue the transfer. This is accomplished by writing the following value to TWCR:
///
/// TWINT = 1
/// TWEA  = X
/// TWSTA = 0
/// TWSTO = 0
/// TWWC  = X
/// TWEN  = 1
/// -     = 0
/// TWIE  = X
///
///
/// This scheme is repeated until the last byte has been sent and the transfer is ended by generating a STOP condition or a repeated START condition.
/// A STOP condition is generated by writing the following value to TWCR:
///
/// TWINT = 1
/// TWEA  = X
/// TWSTA = 0
/// TWSTO = 1
/// TWWC  = X
/// TWEN  = 1
/// -     = 0
/// TWIE  = X
///
///
/// A REPEATED START condition is generated by writing the following value to TWCR:
///
/// TWINT = 1
/// TWEA  = X
/// TWSTA = 0
/// TWSTO = 1
/// TWWC  = X
/// TWEN  = 1
/// -     = 0
/// TWIE  = X
///
///
/// After a repeated START condition (state 0x10) the 2-wire Serial Interface can access the same Slave again, or a new Slave without transmitting a STOP condition.
/// Repeated START enables the Master to switch between Slaves, Master Transmitter mode and Master Receiver mode without losing control of the bus.
/// ```
///-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
///  Table 22-2.   Status codes for Master Transmitter Mode:
///-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/// Status Code | Status of the 2-wire Serial Bus and             |         Application Software Response          | Next Action Taken by TWI Hardware                                                             |
///             | 2-wire Serial Interface Hardware                |   To/from TWDR    |         To TWCR            |                                                                                               |
///             |                                                 |                   | STA | STO | TWIN T | TWE A |                                                                                               |
///-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
///       0x08  | A START condition has been transmitted          | Load SLA+W        |  0  |  0  |   1    |   X   | SLA+W will be transmitted; ACK or NOT ACK will be received                                    |
///-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
///       0x10  | A repeated START condition has been transmitted | Load SLA+W or     |  0  |  0  |   1    |   X   | SLA+W will be transmitted; ACK or NOT ACK will be received                                    |
///             |                                                 | Load SLA+R        |  0  |  0  |   1    |   X   | SLA+R will be transmitted; Logic will switch to Master Receiver mode                          |
///-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
///       0x18  | SLA+W has been transmitted;                     | Load data byte or |  0  |  0  |   1    |   X   | Data byte will be transmitted and ACK or NOT ACK will be received                             |
///             | ACK has been received                           | No TWDR action or |  1  |  0  |   1    |   X   | Repeated START will be transmitted                                                            |
///             |                                                 | No TWDR action or |  0  |  1  |   1    |   X   | STOP condition will be transmitted and TWSTO Flag will be reset                               |
///             |                                                 | No TWDR action    |  1  |  1  |   1    |   X   | STOP condition followed by a START condition will be transmitted and TWSTO Flag will be reset |
///-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
///       0x20  | SLA+W has been transmitted;                     | Load data byte or |  0  |  0  |   1    |   X   | Data byte will be transmitted and ACK or NOT ACK will be received                             |
///             | NOT ACK has been received                       | No TWDR action or |  1  |  0  |   1    |   X   | Repeated START will be transmitted                                                            |
///             |                                                 | No TWDR action or |  0  |  1  |   1    |   X   | STOP condition will be transmitted and TWSTO Flag will be reset                               |
///             |                                                 | No TWDR action    |  1  |  1  |   1    |   X   | STOP condition followed by a START condition will be transmitted and TWSTO Flag will be reset |
///-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
///       0x28  | Data byte has been transmit- ted;               | Load data byte or |  0  |  0  |   1    |   X   | Data byte will be transmitted and ACK or NOT ACK will be received                             |
///             | ACK has been received                           | No TWDR action or |  1  |  0  |   1    |   X   | Repeated START will be transmitted                                                            |
///             |                                                 | No TWDR action or |  0  |  1  |   1    |   X   | STOP condition will be transmitted and TWSTO Flag will be reset                               |
///             |                                                 | No TWDR action    |  1  |  1  |   1    |   X   | STOP condition followed by a START condition will be transmitted and TWSTO Flag will be reset |
///-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
///       0x30  | Data byte has been transmit- ted;               | Load data byte or |  0  |  0  |   1    |   X   | Data byte will be transmitted and ACK or NOT ACK will be received                             |
///             | NOT ACK has been received                       | No TWDR action or |  1  |  0  |   1    |   X   | Repeated START will be transmitted                                                            |
///             |                                                 | No TWDR action or |  0  |  1  |   1    |   X   | STOP condition will be transmitted and TWSTO Flag will be reset                               |
///             |                                                 | No TWDR action    |  1  |  1  |   1    |   X   | STOP condition followed by a START condition will be transmitted and TWSTO Flag will be reset |
///-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
///       0x38  | Arbitration lost in SLA+W or data bytes         | No TWDR action or |  0  |  0  |   1    |   X   | 2-wire Serial Bus will be released and not addressed Slave mode entered                       |
///             |                                                 | No TWDR action    |  1  |  0  |   1    |   X   | A START condition will be transmitted when the bus becomes free                               |
///-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
///```

 


enum TwoWire {

    /// See ATMega328p Datasheet Section 22.9.3.
    enum Prescaler: UInt8 {
        case one = 1
        case four = 2
        case sixteen = 3
        case sixtyFour = 4
    }
}


protocol TwoWireInterfacePort {
    // this will probably(?) always be UInt8, but is useful for preventing the protocol
    // from ever accidentally being used as an existential type
    associatedtype PortDataType: BinaryInteger

    static var TWIBitRateRegister: PortDataType { get set }
    static var TWIControlRegister: UInt8 { get set }
    static var TWIStatusRegister: UInt8 { get set }
    static var TWIDataRegister: UInt8 { get set }
    static var TWISlaveAddressRegister: UInt8 { get set }
    static var TWISlaveAddressMaskRegister: UInt8 { get set }
}


/// TwoWireInterface implementation for ATmega48A/PA/88A/PA/168A/PA/328/P
/// Note: This will probably get moved into the ATmega328p file as this defines the specifit memory addresses for the ATmega328p
/// and chips in the same family. Someday this will also be auto generated.
struct TwoWireInterface: TwoWireInterfacePort {
    
    /// 22.9.1 TWBR â TWI Bit Rate Register
    /// ```
    ///-------------------------------------------------------------------------------
    /// Bit          |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
    ///-------------------------------------------------------------------------------
    /// (0xBC)       | TWBR7 | TWBR6 | TWBR5 | TWBR4 | TWBR3 | TWBR2 | TWBR1 | TWBR0 |
    ///-------------------------------------------------------------------------------
    /// Read/Write   |  R/W  |  R/W  |  R/W  |  R/W  |  R/W  |  R/W  |  R/W  |  R/W  |
    ///-------------------------------------------------------------------------------
    /// InitialValue |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |
    ///-------------------------------------------------------------------------------
    /// ```
    /// TWBR selects the division factor for the bit rate generator. The bit rate generator is a
    /// frequency divider which generates the SCL clock frequency in the Master modes. See âBit
    /// Rate Generator Unitâ on page 221 for calculating bit rates.
    @inlinable
    @inline(__always)
    static var TWIBitRateRegister: UInt8 {
        get {
            _volatileRegisterReadUInt8(0xB8)
        }
        set {
            _volatileRegisterWriteUInt8(0xB8, newValue)
        }
    }
    
    /// 22.9.2 TWCR â TWI Control Register
    /// ```
    ///-------------------------------------------------------------------------------
    /// Bit          |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
    ///-------------------------------------------------------------------------------
    /// (0xBC)       | TWINT | TWEA  | TWSTA | TWSTO | TWWC  | TWEN  |   -   | TWIE  |
    ///-------------------------------------------------------------------------------
    /// Read/Write   |  R/W  |  R/W  |  R/W  |  R/W  |   R   |  R/W  |   R   |  R/W  |
    ///-------------------------------------------------------------------------------
    /// InitialValue |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |
    ///-------------------------------------------------------------------------------
    /// ```
    /// The TWCR is used to control the operation of the TWI. It is used to enable the TWI, to
    /// initiate a Master access by applying a START condition to the bus, to generate a Receiver
    /// acknowledge, to generate a stop condition, and to control halting of the bus while the data
    /// to be written to the bus are written to the TWDR. It also indicates a write collision if
    /// data is attempted written to TWDR while the register is inaccessible.
    ///
    @inlinable
    @inline(__always)
    static var TWIControlRegister: UInt8 {
        get {
            _volatileRegisterReadUInt8(0xBC)
        }
        set {
            _volatileRegisterWriteUInt8(0xBC, newValue)
        }
    }
    
    /// 2.9.3 TWSR â TWI Status Register
    /// ```
    ///-------------------------------------------------------------------------------
    /// Bit          |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
    ///-------------------------------------------------------------------------------
    /// (0xB9)       | TWS7  | TWS6  | TWS5  | TWS4  | TWS3  |   -   | TWPS1 | TWPS0 |
    ///-------------------------------------------------------------------------------
    /// Read/Write   |   R   |   R   |   R   |   R   |   R   |   R   |   R/W |  R/W  |
    ///-------------------------------------------------------------------------------
    /// InitialValue |   1   |   1   |   1   |   1   |   1   |   0   |   0   |   0   |
    ///-------------------------------------------------------------------------------
    /// ```
    @inlinable
    @inline(__always)
    static var TWIStatusRegister: UInt8 {
        get {
            _volatileRegisterReadUInt8(0xB9)
        }
        set {
            _volatileRegisterWriteUInt8(0xB9, newValue)
        }
    }
    
    /// 22.9.4 TWDR â TWI Data Register
    /// ```
    ///-------------------------------------------------------------------------------
    /// Bit          |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
    ///-------------------------------------------------------------------------------
    /// (0xBB)       | TWD7  | TWD6  | TWD5  | TWD4  | TWD3  | TWD2  | TWD1  | TWD0  |
    ///-------------------------------------------------------------------------------
    /// Read/Write   |  R/W  |  R/W  |  R/W  |  R/W  |  R/W  |  R/W  |  R/W  |  R/W  |
    ///-------------------------------------------------------------------------------
    /// InitialValue |   1   |   1   |   1   |   1   |   1   |   0   |   0   |   0   |
    ///-------------------------------------------------------------------------------
    /// ```
    /// In Transmit mode, TWDR contains the next byte to be transmitted. In Receive mode, the TWDR
    /// contains the last byte received. It is writable while the TWI is not in the process of
    /// shifting a byte. This occurs when the TWI Interrupt Flag (TWINT) is set by hardware. Note
    /// that the Data Register cannot be initialized by the user before the first interrupt occurs.
    /// The data in TWDR remains stable as long as TWINT is set. While data is shifted out, data on
    /// the bus is simultaneously shifted in. TWDR always contains the last byte present on the bus,
    /// except after a wake up from a sleep mode by the TWI interrupt. In this case, the contents
    /// of TWDR is undefined. In the case of a lost bus arbitration, no data is lost in the
    /// transition from Master to Slave. Handling of the ACK bit is controlled automatically by the
    /// TWI logic, the CPU cannot access the ACK bit directly.
    ///
    /// These eight bits constitute the next data byte to be transmitted, or the latest data byte
    /// received on the 2-wire Serial Bus.
    @inlinable
    @inline(__always)
    static var TWIDataRegister: UInt8 {
        get {
            _volatileRegisterReadUInt8(0xBB)
        }
        set {
            _volatileRegisterWriteUInt8(0xBB, newValue)
        }
    }
    
    /// 22.9.5 TWAR â TWI (Slave) Address Register
    /// ```
    ///-------------------------------------------------------------------------------
    /// Bit          |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
    ///-------------------------------------------------------------------------------
    /// (0xBA)       | TWA6  | TWA5  | TWA4  | TWA3  | TWA2  | TWA1  | TWA0  | TWGCE |
    ///-------------------------------------------------------------------------------
    /// Read/Write   |  R/W  |  R/W  |  R/W  |  R/W  |  R/W  |  R/W  |  R/W  |  R/W  |
    ///-------------------------------------------------------------------------------
    /// InitialValue |   1   |   1   |   1   |   1   |   1   |   1   |   1   |   0   |
    ///-------------------------------------------------------------------------------
    /// ```
    /// The TWAR should be loaded with the 7-bit Slave address (in the seven most significant bits
    /// of TWAR) to which the TWI will respond when programmed as a Slave Transmitter or Receiver,
    /// and not needed in the Master modes. In multi master systems, TWAR must be set in masters which
    /// can be addressed as Slaves by other Masters.
    ///
    /// The LSB of TWAR is used to enable recognition of the general call address (0x00). There is an
    /// associated address comparator that looks for the slave address (or general call address if
    /// enabled) in the received serial address. If a match is found, an interrupt request is generated.
    @inlinable
    @inline(__always)
    static var TWISlaveAddressRegister: UInt8 {
        get {
            _volatileRegisterReadUInt8(0xBA)
        }
        set {
            _volatileRegisterWriteUInt8(0xBA, newValue)
        }
    }
    
    /// 22.9.6 TWAMR â TWI (Slave) Address Mask Register
    /// ```
    ///-------------------------------------------------------------------------------
    /// Bit          |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
    ///-------------------------------------------------------------------------------
    /// (0xBD)       | TWAM6 | TWAM5 | TWAM4 | TWAM3 | TWAM2 | TWAM1 | TWAM0 |   -   |
    ///-------------------------------------------------------------------------------
    /// Read/Write   |  R/W  |  R/W  |  R/W  |  R/W  |  R/W  |  R/W  |  R/W  |   R   |
    ///-------------------------------------------------------------------------------
    /// InitialValue |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |
    ///-------------------------------------------------------------------------------
    /// ```
    @inlinable
    @inline(__always)
    static var TWISlaveAddressMaskRegister: UInt8 {
        get {
            _volatileRegisterReadUInt8(0xBD)
        }
        set {
            _volatileRegisterWriteUInt8(0xBD, newValue)
        }
    }
}


/// TwoWireInterface is section 22
/// Note: At some point we should get this working with the built in Cli (I think its called) to be more efficient
/// and remove code. At that point we will probably move these values to the TwoWireInterfacePort Protocol while
/// "business logic" remains in an extension.

extension TwoWireInterfacePort {
    
    /// Interrupt Flag
    /// Or TWINT is bit 7 on TWCR. See Datasheet Section 22.9.2
    ///
    /// This bit is set by hardware when the TWI has finished its current job and expects application
    /// software response. If the I-bit in SREG and TWIE in TWCR are set, the MCU will jump to the
    /// TWI Interrupt Vector. While the TWINT Flag is set, the SCL low period is stretched. The TWINT
    /// Flag must be cleared by software by writing a logic one to it. Note that this flag is not
    /// automatically cleared by hardware when executing the interrupt routine. Also note that clearing
    /// this flag starts the operation of the TWI, so all accesses to the TWI Address Register (TWAR),
    /// TWI Status Register (TWSR), and TWI Data Register (TWDR) must be complete before clearing this flag.
    @inlinable
    @inline(__always)
    static var interruptFlag: Bool {
        get { return getRegisterBit(TWIControlRegister, bit: 7) }
        set { setRegisterBit(TWIControlRegister, bit: 7, value: newValue)}
    }
    
    /// Enable Acknowledge
    /// Or TWEA is bit 6 on TWCR. See Datasheet Section 22.9.2
    ///
    /// The TWEA bit controls the generation of the acknowledge pulse. If the TWEA bit is written to one,
    /// the ACK pulse is generated on the TWI bus if the following conditions are met:
    ///   1. The deviceâs own slave address has been received.
    ///   2. A general call has been received, while the TWGCE bit in the TWAR is set.
    ///   3. A data byte has been received in Master Receiver or Slave Receiver mode.
    /// By writing the TWEA bit to zero, the device can be virtually disconnected from the 2-wire Serial
    /// Bus temporarily. Address recognition can then be resumed by writing the TWEA bit to one again.
    @inlinable
    @inline(__always)
    static var enableAcknowledge: Bool {
        get { return getRegisterBit(TWIControlRegister, bit: 6) }
        set { setRegisterBit(TWIControlRegister, bit: 6, value: newValue)}
    }
    
    /// Start Condition
    /// Or TWSTA is bit 5 on TWCR. See Datasheet Section 22.9.2
    ///
    /// The application writes the TWSTA bit to one when it desires to become a Master on the 2-wire Serial
    /// Bus. The TWI hardware checks if the bus is available, and generates a START condition on the bus if
    /// it is free. However, if the bus is not free, the TWI waits until a STOP condition is detected, and
    /// then generates a new START condition to claim the bus Master status. TWSTA must be cleared by software
    /// when the START condition has been transmitted.
    @inlinable
    @inline(__always)
    static var startCondition: Bool {
        get { return getRegisterBit(TWIControlRegister, bit: 5) }
        set { setRegisterBit(TWIControlRegister, bit: 5, value: newValue)}
    }
    
    /// Stop Condition
    /// Or TWSTO is bit 4 on TWCR. See Datasheet Section 22.9.2
    ///
    /// Writing the TWSTO bit to one in Master mode will generate a STOP condition on the 2-wire Serial Bus.
    /// When the STOP condition is executed on the bus, the TWSTO bit is cleared automatically. In Slave mode,
    /// setting the TWSTO bit can be used to recover from an error condition. This will not generate a STOP
    /// condition, but the TWI returns to a well-defined unaddressed Slave mode and releases the SCL and SDA
    /// lines to a high impedance state.
    @inlinable
    @inline(__always)
    static var stopCondition: Bool {
        get { return getRegisterBit(TWIControlRegister, bit: 4) }
        set { setRegisterBit(TWIControlRegister, bit: 4, value: newValue)}
    }
    
    /// Write Collision Flag
    /// Or TWWC is bit 3 on TWCR. See Datasheet Section 22.9.2
    ///
    /// The TWWC bit is set when attempting to write to the TWI Data Register â TWDR when TWINT is low. This
    /// flag is cleared by writing the TWDR Register when TWINT is high.
    @inlinable
    @inline(__always)
    static var writeCollisionFlag: Bool {
        get { return getRegisterBit(TWIControlRegister, bit: 3) }
        set { setRegisterBit(TWIControlRegister, bit: 3, value: newValue)}
    }
    
    /// Enable
    /// Or TWEN is bit 2 on TWCR. See Datasheet Section 22.9.2
    ///
    /// The TWEN bit enables TWI operation and activates the TWI interface. When TWEN is written to one, the
    /// TWI takes control over the I/O pins connected to the SCL and SDA pins, enabling the slew-rate limiters
    /// and spike filters. If this bit is written to zero, the TWI is switched off and all TWI transmissions
    /// are terminated, regardless of any ongoing operation.
    @inlinable
    @inline(__always)
    static var enable: Bool {
        get { return getRegisterBit(TWIControlRegister, bit: 2) }
        set { setRegisterBit(TWIControlRegister, bit: 2, value: newValue)}
    }
    
    /// Interrupt Enable
    /// Or TWIE is bit 0 on TWCR. See Datasheet Section 22.9.2
    ///
    /// When this bit is written to one, and the I-bit in SREG is set, the TWI interrupt request will be
    /// activated for as long as the TWINT Flag is high.
    @inlinable
    @inline(__always)
    static var interruptEnable: Bool {
        get { return getRegisterBit(TWIControlRegister, bit: 0) }
        set { setRegisterBit(TWIControlRegister, bit: 0, value: newValue)}
    }
    
    /// Status
    /// Or TWS are bits 7 through 3 on TWSR. See Datasheet Section 22.9.3.
    ///
    /// These 5 bits reflect the status of the TWI logic and the 2-wire Serial Bus. The different status
    /// codes are described later in this section. Note that the value read from TWSR contains both the
    /// 5-bit status value and the 2-bit prescaler value. The application designer should mask the prescaler
    /// bits to zero when checking the Status bits. This makes status checking independent of prescaler
    /// setting. This approach is used in this datasheet, unless otherwise noted.
    @inlinable
    @inline(__always)
    static var status: UInt8 {
        get { return TWIStatusRegister & 0b11111000 }
        set { TWIStatusRegister |= (newValue & 0b11111000) }
    }
    
    /// Prescaler
    /// Or TWPS are bits 1 and 0 on TWSR. See Datasheet Section 22.9.3.
    ///
    /// These bits can be read and written, and control the bit rate prescaler.
    /// ```
    /// Table 22-7. TWI Bit Rate Prescaler
    ///----------------------------------
    /// TWPS1 | TWPS0 | Prescaler Value |
    ///----------------------------------
    ///   0   |   0   | 1               |
    ///----------------------------------
    ///   0   |   1   | 4               |
    ///----------------------------------
    ///   1   |   0   | 16              |
    ///----------------------------------
    ///   1   |   1   | 64              |
    ///----------------------------------
    /// ```
    /// To calculate bit rates, see âBit Rate Generator Unitâ on page 221. The value of TWPS1...0 is used
    /// in the equation.
    @inlinable
    @inline(__always)
    static var prescaler: TwoWire.Prescaler {
        get {
            let value = TWIStatusRegister & 0b00000011
            return TwoWire.Prescaler(rawValue: value) ?? .one
        }
        set {
            TWIStatusRegister |= (newValue.rawValue & 0b00000011)
        }
    }
    
    /// Slave Address
    /// Or TWA are bits 7 through 1 on TWAR. See Datasheet Section 22.9.5.
    ///
    /// These seven bits constitute the slave address of the TWI unit.
    @inlinable
    @inline(__always)
    static var slaveAddress: UInt8 {
        get {
            return (TWISlaveAddressRegister & 0b11111110) >> 1
        }
        set {
            let shiftedAddress = newValue << 1
            TWISlaveAddressRegister |= (shiftedAddress & 0b11111110)
        }
    }
    
    /// General Call Recognition Enable
    /// Or TWGCE is bit 0 on TWAR. See Datasheet Section 22.9.5.
    ///
    /// If set, this bit enables the recognition of a General Call given over the 2-wire Serial Bus.
    @inlinable
    @inline(__always)
    static var generalCallRecognitionEnable: Bool {
        get { return getRegisterBit(TWISlaveAddressRegister, bit: 0b00000001) }
        set { setRegisterBit(TWISlaveAddressRegister, bit: 0b00000001, value: newValue)}
    }
    
    /// Slave Address Mask
    /// Or TWAM are bits 7 through 1 on TWAR. See Datasheet Section 22.9.6.
    ///
    /// The TWAMR can be loaded with a 7-bit Slave Address mask. Each of the bits in TWAMR can
    /// mask (disable) the corresponding address bits in the TWI Address Register (TWAR). If the
    /// mask bit is set to one then the address match logic ignores the compare between the incoming
    /// address bit and the corresponding bit in TWAR. Figure 22-22 shown the address match logic in
    /// detail.
    @inlinable
    @inline(__always)
    static var slaveAddressMask: UInt8 {
        get {
            return (TWISlaveAddressMaskRegister & 0b11111110) >> 1
        }
        set {
            let shiftedAddress = newValue << 1
            TWISlaveAddressMaskRegister |= (shiftedAddress & 0b11111110)
        }
    }
}
